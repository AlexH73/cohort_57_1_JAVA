Index: out/production/Desktop/Lessons/Lesson_26/student_code/task.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n## **Задание: Реализация системы управления ветеринарной клиникой**\r\n\r\n\uD83D\uDD39 В этом задании вам нужно создать систему управления ветеринарной клиникой,  \r\nв которой можно регистрировать клиентов и их питомцев, записывать их на прием  \r\nи вести историю болезней.  \r\n\uD83D\uDD39 **Шаг 1:** Реализовать базовые классы `Person` и `Animal`.  \r\n\uD83D\uDD39 **Шаг 2:** Создать подклассы `Client`, `Veterinarian`, `Dog`, `Cat`, `ExoticAnimal`.  \r\n\uD83D\uDD39 **Шаг 3:** Разработать классы `Appointment` и `MedicalHistory` для хранения данных о визитах.  \r\n\uD83D\uDD39 **Шаг 4:** Реализовать класс `VetClinic`, который будет управлять клиентами, питомцами и приемами.\r\n\r\n---\r\n\r\n### **Шаг 1: Создание базовых классов `Person` и `Animal`**\r\n✔ `Person` – общий класс для всех людей в системе (клиентов и врачей).  \r\n✔ Поля: `name`, `age`, `phoneNumber`.  \r\n✔ `Animal` – общий класс для всех животных в системе.  \r\n✔ Поля: `name`, `age`, `owner` (владелец типа `Client`).\r\n\r\n---\r\n\r\n### **Шаг 2: Создание подклассов для людей и животных**\r\n✔ `Client` – наследует `Person`, добавляет поле `pets`, хранящее список животных.  \r\n✔ `Veterinarian` – наследует `Person`, добавляет поле `specialization`.  \r\n✔ `Dog` и `Cat` – наследуют `Animal`, добавляют специфические методы (`bark()`, `meow()`).  \r\n✔ `ExoticAnimal` – наследует `Animal`, добавляет поле `species` (вид животного).\r\n\r\n---\r\n\r\n### **Шаг 3: Разработка классов для хранения информации о приемах**\r\n✔ `Appointment` – класс, представляющий визит питомца к ветеринару.  \r\n✔ Поля: `date`, `animal`, `veterinarian`, `diagnosis`.  \r\n✔ Метод `conductCheckup()`, который устанавливает диагноз.  \r\n✔ `MedicalHistory` – хранит список `Appointment` для конкретного животного.  \r\n✔ Метод `addAppointment()`, который добавляет новый визит питомца в историю.\r\n\r\n---\r\n\r\n### **Шаг 4: Реализация CRM для ветеринарной клиники**\r\n✔ `VetClinic` – класс, управляющий клиентами, питомцами и приемами.  \r\n✔ Поля: список клиентов, список врачей.  \r\n✔ Методы:\r\n- `registerClient(Client client)` – добавляет клиента в клинику.\r\n- `addPetToClient(Client client, Animal pet)` – добавляет питомца клиенту.\r\n- `scheduleAppointment(Animal animal, Veterinarian veterinarian, String date)` – записывает питомца на прием.\r\n- `getMedicalHistory(Animal animal)` – выводит историю болезни питомца.\r\n- `showAllAppointments()` – отображает все запланированные визиты.\r\n\r\n---\r\n\r\n### **Шаг 5: Использование полиморфизма**\r\n✔ Создайте список животных (`Dog`, `Cat`, `ExoticAnimal`).  \r\n✔ Используйте полиморфизм для вызова методов, специфичных для каждого типа животного.  \r\n✔ Реализуйте метод `treatAnimal()`, принимающий `Animal` и выполняющий осмотр.  \r\n✔ Вызовите `scheduleAppointment()`, чтобы создать визиты для питомцев, а затем `showAllAppointments()` для вывода информации о них.\r\n\r\n---\r\n\r\n\uD83D\uDE80 **Дополнительное задание:**  \r\n✔ Добавить в `Client` метод `addPet()`, который ограничивает количество питомцев.  \r\n✔ Реализовать перегрузку метода `conductCheckup()`, чтобы можно было проводить осмотр с разными параметрами.  \r\n✔ Добавить метод `prescribeTreatment()`, который выдает рекомендации по лечению.  \r\n✔ Сделать метод `findVeterinarianBySpecialization(String specialization)`, который ищет подходящего врача.\r\n
===================================================================
diff --git a/out/production/Desktop/Lessons/Lesson_26/student_code/task.md b/out/production/Desktop/Lessons/Lesson_26/student_code/task.md
--- a/out/production/Desktop/Lessons/Lesson_26/student_code/task.md	(revision f8f7fa2a169477705f0cafef02a3d3dbab781421)
+++ b/out/production/Desktop/Lessons/Lesson_26/student_code/task.md	(date 1744914293516)
@@ -29,7 +29,7 @@
 
 ### **Шаг 3: Разработка классов для хранения информации о приемах**
 ✔ `Appointment` – класс, представляющий визит питомца к ветеринару.  
-✔ Поля: `date`, `animal`, `veterinarian`, `diagnosis`.  
+✔ Поля: `date`, `animal24`, `veterinarian`, `diagnosis`.  
 ✔ Метод `conductCheckup()`, который устанавливает диагноз.  
 ✔ `MedicalHistory` – хранит список `Appointment` для конкретного животного.  
 ✔ Метод `addAppointment()`, который добавляет новый визит питомца в историю.
@@ -42,8 +42,8 @@
 ✔ Методы:
 - `registerClient(Client client)` – добавляет клиента в клинику.
 - `addPetToClient(Client client, Animal pet)` – добавляет питомца клиенту.
-- `scheduleAppointment(Animal animal, Veterinarian veterinarian, String date)` – записывает питомца на прием.
-- `getMedicalHistory(Animal animal)` – выводит историю болезни питомца.
+- `scheduleAppointment(Animal animal24, Veterinarian veterinarian, String date)` – записывает питомца на прием.
+- `getMedicalHistory(Animal animal24)` – выводит историю болезни питомца.
 - `showAllAppointments()` – отображает все запланированные визиты.
 
 ---
Index: out/production/Desktop/Lessons/Lesson_26/practice/task.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n## **Задание: Реализация системы управления ветеринарной клиникой**\r\n\r\n\uD83D\uDD39 В этом задании вам нужно создать систему управления ветеринарной клиникой,  \r\nв которой можно регистрировать клиентов и их питомцев, записывать их на прием  \r\nи вести историю болезней.  \r\n\uD83D\uDD39 **Шаг 1:** Реализовать базовые классы `Person` и `Animal`.  \r\n\uD83D\uDD39 **Шаг 2:** Создать подклассы `Client`, `Veterinarian`, `Dog`, `Cat`, `ExoticAnimal`.  \r\n\uD83D\uDD39 **Шаг 3:** Разработать классы `Appointment` и `MedicalHistory` для хранения данных о визитах.  \r\n\uD83D\uDD39 **Шаг 4:** Реализовать класс `VetClinic`, который будет управлять клиентами, питомцами и приемами.\r\n\r\n---\r\n\r\n### **Шаг 1: Создание базовых классов `Person` и `Animal`**\r\n✔ `Person` – общий класс для всех людей в системе (клиентов и врачей).  \r\n✔ Поля: `name`, `age`, `phoneNumber`.  \r\n✔ `Animal` – общий класс для всех животных в системе.  \r\n✔ Поля: `name`, `age`, `owner` (владелец типа `Client`).\r\n\r\n---\r\n\r\n### **Шаг 2: Создание подклассов для людей и животных**\r\n✔ `Client` – наследует `Person`, добавляет поле `pets`, хранящее список животных.  \r\n✔ `Veterinarian` – наследует `Person`, добавляет поле `specialization`.  \r\n✔ `Dog` и `Cat` – наследуют `Animal`, добавляют специфические методы (`bark()`, `meow()`).  \r\n✔ `ExoticAnimal` – наследует `Animal`, добавляет поле `species` (вид животного).\r\n\r\n---\r\n\r\n### **Шаг 3: Разработка классов для хранения информации о приемах**\r\n✔ `Appointment` – класс, представляющий визит питомца к ветеринару.  \r\n✔ Поля: `date`, `animal`, `veterinarian`, `diagnosis`.  \r\n✔ Метод `conductCheckup()`, который устанавливает диагноз.  \r\n✔ `MedicalHistory` – хранит список `Appointment` для конкретного животного.  \r\n✔ Метод `addAppointment()`, который добавляет новый визит питомца в историю.\r\n\r\n---\r\n\r\n### **Шаг 4: Реализация CRM для ветеринарной клиники**\r\n✔ `VetClinic` – класс, управляющий клиентами, питомцами и приемами.  \r\n✔ Поля: список клиентов, список врачей.  \r\n✔ Методы:\r\n- `registerClient(Client client)` – добавляет клиента в клинику.\r\n- `addPetToClient(Client client, Animal pet)` – добавляет питомца клиенту.\r\n- `scheduleAppointment(Animal animal, Veterinarian veterinarian, String date)` – записывает питомца на прием.\r\n- `getMedicalHistory(Animal animal)` – выводит историю болезни питомца.\r\n- `showAllAppointments()` – отображает все запланированные визиты.\r\n\r\n---\r\n\r\n### **Шаг 5: Использование полиморфизма**\r\n✔ Создайте список животных (`Dog`, `Cat`, `ExoticAnimal`).  \r\n✔ Используйте полиморфизм для вызова методов, специфичных для каждого типа животного.  \r\n✔ Реализуйте метод `treatAnimal()`, принимающий `Animal` и выполняющий осмотр.  \r\n✔ Вызовите `scheduleAppointment()`, чтобы создать визиты для питомцев, а затем `showAllAppointments()` для вывода информации о них.\r\n\r\n---\r\n\r\n\uD83D\uDE80 **Дополнительное задание:**  \r\n✔ Добавить в `Client` метод `addPet()`, который ограничивает количество питомцев.  \r\n✔ Реализовать перегрузку метода `conductCheckup()`, чтобы можно было проводить осмотр с разными параметрами.  \r\n✔ Добавить метод `prescribeTreatment()`, который выдает рекомендации по лечению.  \r\n✔ Сделать метод `findVeterinarianBySpecialization(String specialization)`, который ищет подходящего врача.\r\n
===================================================================
diff --git a/out/production/Desktop/Lessons/Lesson_26/practice/task.md b/out/production/Desktop/Lessons/Lesson_26/practice/task.md
--- a/out/production/Desktop/Lessons/Lesson_26/practice/task.md	(revision f8f7fa2a169477705f0cafef02a3d3dbab781421)
+++ b/out/production/Desktop/Lessons/Lesson_26/practice/task.md	(date 1744914293515)
@@ -29,7 +29,7 @@
 
 ### **Шаг 3: Разработка классов для хранения информации о приемах**
 ✔ `Appointment` – класс, представляющий визит питомца к ветеринару.  
-✔ Поля: `date`, `animal`, `veterinarian`, `diagnosis`.  
+✔ Поля: `date`, `animal24`, `veterinarian`, `diagnosis`.  
 ✔ Метод `conductCheckup()`, который устанавливает диагноз.  
 ✔ `MedicalHistory` – хранит список `Appointment` для конкретного животного.  
 ✔ Метод `addAppointment()`, который добавляет новый визит питомца в историю.
@@ -42,8 +42,8 @@
 ✔ Методы:
 - `registerClient(Client client)` – добавляет клиента в клинику.
 - `addPetToClient(Client client, Animal pet)` – добавляет питомца клиенту.
-- `scheduleAppointment(Animal animal, Veterinarian veterinarian, String date)` – записывает питомца на прием.
-- `getMedicalHistory(Animal animal)` – выводит историю болезни питомца.
+- `scheduleAppointment(Animal animal24, Veterinarian veterinarian, String date)` – записывает питомца на прием.
+- `getMedicalHistory(Animal animal24)` – выводит историю болезни питомца.
 - `showAllAppointments()` – отображает все запланированные визиты.
 
 ---
