package Homework.Lesson_Nr_20;
import java.util.Random;
import java.util.Scanner;
// Домашнее задание:

// Автор: Alexander Berlin
// Дата: ${DATE}

/**
 * Описание:   Задача:
 * Контекст: На заводе производятся детали, каждая из которых после изготовления оценивается и помещается в партию. Партия представлена массивом чисел, где:
 *
 * -1 обозначает бракованную деталь,
 * 0 - деталь, требующую доработки,
 * 1 - идеальную деталь, готовую к эксплуатации.
 * Задание:
 *
 * Создайте массив целых чисел, который содержит случайное распределение значений -1, 0 и 1, имитируя партию деталей с завода.
 * Рассчитайте и выведите в консоль процентное соотношение каждого типа деталей в партии.
 * Детали Реализации:
 * Инициализация Массива:
 *
 * Массив должен быть инициализирован случайными числами -1, 0, и 1.
 * Размер массива можно задать произвольно или запросить у пользователя.
 * Расчет Процентного Соотношения:
 *
 * Подсчитайте количество каждого типа деталей в массиве.
 * Рассчитайте процентное соотношение для каждого типа деталей от общего количества деталей в массиве.
 * Вывод Результата:
 *
 * Выведите в консоль процентное соотношение бракованных, требующих доработки и идеальных деталей.
 **/
 //Создаём каркас класса и метода main (это основа программы)
public class DetailQualityAnalysis {
    public static void main(String[] args) {

        //Запрос размера партии у пользователя
        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите размер партии деталей: ");
        int n = scanner.nextInt();

        // Создаем массив для деталей
        int[] parts = new int[n];
        Random random = new Random();
        for (int i = 0; i < n; i++) {                    //Инициализация массива случайными значениями -1, 0, 1.
            parts[i] = random.nextInt(3) - 1;     //random.nextInt(3) генерирует числа от 0 до 2,
                                                         // вычитая 1 получаем -1, 0 или 1.
        }
        //Подсчет количества деталей каждого типа
        int defect = 0; // Счетчик для деталей с -1 (брак)
        int rework = 0; // Счетчик для деталей с 0 (требуют доработки)
        int ideal = 0;  // Счетчик для деталей с 1 (идеальные)

        for (int part : parts) {
            if (part == -1) {
                defect++;
            } else if (part == 0) {
                rework++;
            } else if (part == 1) {
                ideal++;

            }
        }
        // Расчет процентного соотношения
        // Приводим счетчики к типу double для точного деления
        double percentDefective = (double) defect / n * 100;
        double percentRework = (double) rework / n * 100;
        double percentIdeal = (double) ideal / n * 100;

        // Вывод результатов в консоль
        System.out.println("Процент бракованных деталей (-1): " + percentDefective + "%");
        System.out.println("Процент деталей, требующих доработки (0): " + percentRework + "%");
        System.out.println("Процент идеальных деталей (1): " + percentIdeal + "%");

        // Закрываем Scanner, чтобы не было утечки ресурсов
        scanner.close();
        }

 }
















