package Lessons.Lesson_33.code;

import java.util.LinkedList;
import java.util.Queue;

/**
 * –û—á–µ—Ä–µ–¥—å (Queue) ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É FIFO (First In, First Out).
 * –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω –ø–µ—Ä–≤—ã–º.
 *
 * üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
 * - `offer(element)`: –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏.
 * - `poll()`: –£–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∏–ª–∏ null, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞).
 * - `peek()`: –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ null, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞).
 * - `remove(element)`: –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
 * - `contains(element)`: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.
 * - `size()`: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏.
 * - `clear()`: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å.
 * - `isEmpty()`: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å.
 * - `addAll(collection)`: –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
 */
public class QueueOperationsDemo {
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        Queue<String> queue = new LinkedList<>();

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (enqueue)
        queue.offer("–ü–µ—Ä–≤—ã–π");
        queue.offer("–í—Ç–æ—Ä–æ–π");
        queue.offer("–¢—Ä–µ—Ç–∏–π");
        queue.offer("–ß–µ—Ç–≤—ë—Ä—Ç—ã–π");

        System.out.println("–ò—Å—Ö–æ–¥–Ω–∞—è –æ—á–µ—Ä–µ–¥—å: " + queue);

        // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏ (dequeue)
        System.out.println("–£–¥–∞–ª—ë–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: " + removedElement);
        System.out.println("–û—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: " + queue);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
        System.out.println("–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è: " + queue.peek());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        System.out.println("–û—á–µ—Ä–µ–¥—å —Å–æ–¥–µ—Ä–∂–∏—Ç '–¢—Ä–µ—Ç–∏–π'? " + queue.contains("–¢—Ä–µ—Ç–∏–π"));

        // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
        System.out.print("–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏: ");
        for (String item : queue) {
            System.out.print(item + " ");
        }
        System.out.println();

        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        queue.remove("–¢—Ä–µ—Ç–∏–π");
        System.out.println("–û—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è '–¢—Ä–µ—Ç–∏–π': " + queue);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        Queue<String> additionalQueue = new LinkedList<>();
        additionalQueue.offer("–ù–æ–≤—ã–π1");
        additionalQueue.offer("–ù–æ–≤—ã–π2");
        queue.addAll(additionalQueue);
        System.out.println("–û—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + queue);

        // –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        System.out.println("–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: " + queue.size());

        // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        queue.clear();
        System.out.println("–û—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: " + queue);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å
        System.out.println("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞? " + queue.isEmpty());
    }
}