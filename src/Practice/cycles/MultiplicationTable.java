package Practice.cycles;

/**
 * <h1>‚úèÔ∏è –£—Å–ª–æ–≤–∏–µ:</h1>
 * –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–ª—è —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10.
 * <p>
 * <b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>
 * <p>
 * –ò—Å–ø–æ–ª—å–∑—É–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã:
 * <p>
 * –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10 (i)
 * <p>
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10 (j)
 * <p>
 * –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: i * j = —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * <p>
 * –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: MultiplicationTable
 * <p>
 * –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
 * <p>
 * i, j ‚Äî –∏–Ω–¥–µ–∫—Å—ã —Ü–∏–∫–ª–æ–≤
 * <p>
 * result ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –∏ –±–µ–∑ –Ω–µ—ë, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å i * j)
 */
public class MultiplicationTable {
    public static void main(String[] args) {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                System.out.printf("%4d * %2d = %2d", i, j, i * j);
            }
            System.out.println();
        }
    }
    /*
    –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª i –æ—Ç 1 –¥–æ 10 ‚Äî —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã

    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª j –æ—Ç 1 –¥–æ 10 ‚Äî —Å—Ç–æ–ª–±—Ü—ã

    –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: i * j = —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ (–æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ i) –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏

    %4d ‚Äî –∑–Ω–∞—á–∏—Ç "—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —à–∏—Ä–∏–Ω–æ–π 4 —Å–∏–º–≤–æ–ª–∞".
    –≠—Ç–æ –¥–∞—ë—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã.

    printf() –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏,
    –ø–æ—ç—Ç–æ–º—É System.out.println() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞.
    */
}
